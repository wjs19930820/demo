<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.example.demo.dao.ReviewDao">

	<resultMap id="ReviewResultMap" type="com.example.demo.domain.Review">
        <result property="reviewId" column="review_id"/>
        <result property="reviewCode" column="review_code"/>
        <result property="reviewType" column="review_type"/>
        <result property="warehouseId" column="warehouse_id"/>
        <result property="status" column="status"/>
        <result property="memo" column="memo"/>
        <result property="createUserId" column="create_user_id"/>
        <result property="createUserName" column="create_user_name"/>
        <result property="createTime" column="create_time"/>
        <result property="completeUserId" column="complete_user_id"/>
        <result property="completeUserName" column="complete_user_name"/>
        <result property="completeTime" column="complete_time"/>
        <result property="isDifference" column="is_difference"/>
        <result property="isDeleted" column="is_deleted"/>
	</resultMap>

	<sql id="columns">
		review_id,review_code,review_type,warehouse_id,status,memo,create_user_id,create_user_name,create_time,complete_user_id,complete_user_name,complete_time,is_difference,is_deleted
	</sql>

	<insert id="saveReview" useGeneratedKeys="true" keyProperty="reviewId">
        INSERT INTO review (
        	review_id ,
        	review_code ,
        	review_type ,
        	warehouse_id ,
        	status ,
        	memo ,
        	create_user_id ,
        	create_user_name ,
        	create_time ,
        	complete_user_id ,
        	complete_user_name ,
        	complete_time ,
        	is_difference ,
        	is_deleted 
        ) VALUES (
        	#{reviewId} ,
        	#{reviewCode} ,
        	#{reviewType} ,
        	#{warehouseId} ,
        	#{status} ,
        	#{memo} ,
        	#{createUserId} ,
        	#{createUserName} ,
        	#{createTime} ,
        	#{completeUserId} ,
        	#{completeUserName} ,
        	#{completeTime} ,
        	#{isDifference} ,
        	#{isDeleted} 
        )
	</insert>
    
	<update id="updateReview" >
        UPDATE review SET
	        review_code = #{reviewCode} ,
	        review_type = #{reviewType} ,
	        warehouse_id = #{warehouseId} ,
	        status = #{status} ,
	        memo = #{memo} ,
	        create_user_id = #{createUserId} ,
	        create_user_name = #{createUserName} ,
	        create_time = #{createTime} ,
	        complete_user_id = #{completeUserId} ,
	        complete_user_name = #{completeUserName} ,
	        complete_time = #{completeTime} ,
	        is_difference = #{isDifference} ,
	        is_deleted = #{isDeleted} 
        WHERE 
	        review_id = #{reviewId} 
	</update>


    <delete id="deleteReview">
        DELETE FROM review WHERE
        review_id = #{id} 
    </delete>
	
	<select id="isReviewExists" resultType="boolean">
		SELECT count(*) FROM review WHERE 
        review_id = #{id} 
	</select>
    
    <select id="getReview" resultMap="ReviewResultMap">
		SELECT <include refid="columns" />
		    FROM review 
	        WHERE 
		        review_id = #{id} 
	</select>
	
	<select id="listReviewByIds" resultMap="ReviewResultMap">
    	SELECT <include refid="columns" />
	    FROM review 
		WHERE 
			review_id IN
			<foreach collection="collection" item="item" open="(" close=")" separator=",">#{item}</foreach>
    </select>
	
	<sql id="findWhere1">

		<where>	      				
	       <if test="reviewCode !=null and reviewCode != ''">
				AND review_code  like CONCAT(#{reviewCode},'%')
			</if>
	       <if test="status !=null ">
				AND status = #{status}
			</if>
			<if test="statusList !=null ">
				AND status IN
				<foreach collection="statusList" item="item" open="(" close=")" separator=",">#{item}</foreach>
			</if>
	       <if test="createUserName !=null and createUserName != ''">
				AND create_user_name  like CONCAT(#{createUserName},'%')
			</if>
			<if test="createTimeBegin !=null">
				AND create_time >= #{createTimeBegin}
			</if>
			<if test="createTimeEnd !=null">
				AND create_time &lt;= #{createTimeEnd}
			</if>
	       <if test="isDifference !=null">
				AND is_difference =#{isDifference}
			</if>
			AND is_deleted =0
			AND warehouse_id = #{warehouseId}
		</where>
	</sql>


	<sql id="findWhere">
		<where>
			<if test="reviewCode !=null and reviewCode != ''">
				AND review_code = #{reviewCode}
			</if>
			<if test="status !=null ">
				AND status = #{status}
			</if>
			<if test="statusList !=null ">
				AND status IN
				<foreach collection="statusList" item="item" open="(" close=")" separator=",">#{item}</foreach>
			</if>
			<if test="createUserName !=null and createUserName != ''">
				AND create_user_name = #{createUserName}
			</if>
			<if test="createTimeBegin !=null">
				AND create_time >= #{createTimeBegin}
			</if>
			<if test="createTimeEnd !=null">
				AND create_time &lt;= #{createTimeEnd}
			</if>
			<if test="isDifference !=null">
				AND is_difference =#{isDifference}
			</if>
			AND is_deleted =0
			AND warehouse_id = #{warehouseId}
		</where>
	</sql>

	<select id="listReview" resultMap="ReviewResultMap">
		SELECT <include refid="columns" />
		FROM review
		INNER JOIN (
		SELECT review_id
		FROM review
		<include refid="findWhere1"/>
		<if test="orderByReviewIdDesc != null and orderByReviewIdDesc != ''">
			ORDER BY review_id DESC
		</if>
        <if test="offset != null and rows != null">
            LIMIT #{offset}, #{rows}
        </if>
		) AS t
		USING ( review_id )
		<if test="sortColumns != null and sortColumns != ''">
			ORDER BY #{sortColumns}
		</if>
		<if test="orderByReviewIdDesc != null and orderByReviewIdDesc != ''">
			ORDER BY review_id DESC
		</if>
    </select>


    <select id="countReview" resultType="long">
        SELECT count(*) FROM review 
		<include refid="findWhere1"/>
    </select>

</mapper>

